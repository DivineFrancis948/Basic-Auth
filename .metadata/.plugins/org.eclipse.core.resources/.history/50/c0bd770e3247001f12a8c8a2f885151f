package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.config.JwtUtils;
import com.example.demo.controller.dto.AuthenticationRequest;
import com.example.demo.dao.UserDao;

import lombok.NoArgsConstructor;

@RestController
@RequestMapping("/api/auth")
@NoArgsConstructor
public class AuthenticationController {
	
//	@Autowired
//	AuthenticationManager authenticationManager;
//	
//	@Autowired
//	UserDao userDao;
////	UserDetailsService userDetailsService;
//	
//	@Autowired
//	JwtUtils jwtUtils;
	
	
	private final AuthenticationManager authenticationManager;
	private final UserDao userDao;
	private final JwtUtils jwtUtils;
	
	
	public AuthenticationController(AuthenticationManager authenticationManager,
			UserDao userDao,
	 JwtUtils jwtUtils) {
		this.authenticationManager = authenticationManager;
		this.userDao = userDao;
		this.jwtUtils = jwtUtils;
		
	}
	
	
	
	@PostMapping("/auth")
	public ResponseEntity<String> authenticate(@RequestBody AuthenticationRequest request){
	
//		BCryptPasswordEncoder bc= new BCryptPasswordEncoder();
//		request.setPassword(bc.encode(request.getPassword()));
		authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword())
				);
		
		final UserDetails  user = userDao.getUserByEmail(request.getEmail());
		
		if(user!= null) {
			return ResponseEntity.ok(jwtUtils.generateToken(user));
		}
		
		return ResponseEntity.status(400).body("Some error occured");
	}


}
